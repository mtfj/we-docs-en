.. _PoA-consensus:

Алгоритм консенсуса Proof of Authority
===========================================

В приватном блокчейне не всегда нужны токены - например, блокчейн может быть использован для хранения хешей документов, которыми обмениваются организации. 
В таком случае, при отсутствии токенов и комиссий с транзакций, решение на базе алгоритма консенсуса PoS является избыточным. 
В Vostok можно выбрать альтернативный алгоритм консенсуса — Proof of Authority. Разрешение на майнинг в алгоритме PoA выдаётся централизовано. 
Это упрощает принятие решений по сравнению с алгоритмом PoS. Модель Proof of Authority основана на ограниченном количестве валидаторов блока, что делает её масштабируемой системой. Блоки и транзакции проверяются заранее утвержденными участниками, которые выступают в качестве модераторов системы.

Описание алгоритма
~~~~~~~~~~~~~~~~~~~~~~~~~~

На базе представленных ниже параметров формируется алгоритм определения майнера текущего блока. Параметры консенсуса указываются в блоке ``consensus`` конфигурационного файла ноды.

* t - длительность раунда в секундах (параметр конфигурационного файла ноды: round-duration).
* t\ :sub:`s` \ - длительность периода синхронизации, вычисляется как t*0,1, но не более 30 секунд (параметр конфигурационного файла ноды: sync-duration).
* N\ :sub:`ban` \ - количество пропущенных подряд раундов для выдачи бана майнеру (параметр конфигурационного файла ноды: warnings-for-ban);
* P\ :sub:`ban` \ - доля максимального количества забаненных майнеров, в процентах от 0 до 100 (параметр конфигурационного файла ноды: max-bans-percentage);
* t\ :sub:`ban` \ - продолжительность бана майнера в блоках (параметр конфигурационного файла ноды: ban-duration-blocks).
* T\ :sub:`0` \ - unix time создания genesis блока.
* T\ :sub:`H` \ - unix time создания блока H — ключевой блок для NG.
* r - номер раунда, вычисляется как (T\ :sub:`Current` \-T\ :sub:`0` \) div (t+ t\ :sub:`s` \).
* A\ :sub:`r` \ - лидер раунда r, имеющий право на создание ключевых блоков и микроблоков для NG в раунде r.
* H – высота цепочки, на которой создается ключевой блок и микроблоки для NG. Право на выпуск блока на высоте H имеет лидер раунда  A\ :sub:`r` \.
* M\ :sub:`H` \ - майнер, выпустивший блок на высоте H.
* Q\ :sub:`H` \ - очередь активных на высоте H майнеров.

Очередь Q\ :sub:`H` \ формируется из адресов, которым permission транзакцией выдано разрешение на майнинг, у которых оно не было отозвано до высоты H, и не истекло до момента времени T\ :sub:`H` \.

Очередь сортируется по временной метке транзакции предоставления прав на майнинг – узел, которому права были предоставлены раньше, будет выше в очереди.
Для согласованной сети эта очередь будет одинакова на каждой ноде.

Новый блок создается в течение каждого раунда r. Раунд длится t секунд. После каждого раунда отводится t\ :sub:`s` \ секунд на синхронизацию данных в сети.
В период синхронизации микроблоки и ключевые блоки не формируются.
Для каждого раунда существует единственный лидер A\ :sub:`r` \, который имеет право создать блок в этом раунде.
Определение лидера может производиться на каждом узле сети с одинаковым результатом. Определение лидера раунда осуществляется следующим образом:

#. Определяется майнер M\ :sub:`H-1` \, который создал предыдущий ключевой блок на высоте H-1.
#. Вычисляется очередь Q\ :sub:`H` \ активных майнеров.
#. Из очереди исключаются неактивные майнеры (подробнее в пункте :ref:`kick_inactive`).
#. Если майнер блока H-1 (M\ :sub:`H-1` \) есть в очереди Q\ :sub:`H` \, лидером A\ :sub:`r` \ становится следующий по очереди майнер.
#. Если майнера блока H-1 (M\ :sub:`H-1` \), нет в очереди Q\ :sub:`H` \, лидером A\ :sub:`r` \ становится майнер, идущий в очереди за майнером блока H-2(M\ :sub:`H-2` \), и так далее.
#. Если ни одного из майнеров блоков (H-1..1) нет в очереди, лидером становится первый майнер очереди.

Данный алгоритм позволяет детерминировано вычислить и проверить майнера, который должен был создать каждый блок цепочки, за счет возможности вычислить список авторизованных майнеров на каждый момент времени.
Если блок не был создан назначенным лидером в отведенное время, в текущий раунд не производится блоков, раунд «пропускается».
Лидеры, пропускающие создание блоков, временно исключаются из очереди по алгоритму, описанному в пункте :ref:`kick_inactive`.

Валидным считается блок, выпущенный лидером A\ :sub:`r` \ с временем блока T\ :sub:`H` \ из полуинтервала (T\ :sub:`0` \+(r-1)*(t+t\ :sub:`s` \); T\ :sub:`0` \+(r-1)*(t+t\ :sub:`s` \)+t].
Блок, созданный майнером не в свою очередь или не вовремя, не считается валидным.
После раунда длительностью t сеть синхронизирует данные в течение t\ :sub:`s` \. У лидера A\ :sub:`r` \ есть время t\ :sub:`s` \ для того, чтобы распространить валидный блок по сети.
Если каким-либо узлом сети за время t\ :sub:`s` \ не был получен блок от лидера A\ :sub:`r` \, этот узел признает раунд «пропущенным» и ожидает новый блок H в следующем раунде r+1, от следующего лидера A\ :sub:`r+1` \.

Параметры консенсуса: тип (PoS или PoA), t, t\ :sub:`s` \ задаются в конфигурационном файле узла сети. *Параметр t при этом должен совпадать у всех участников сети*, иначе произойдет форк сети.

Синхронизация времени между узлами сети
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Каждый узел сети должен синхронизировать время приложения с доверенным NTP-сервером в начале каждого раунда.
Адрес и порт сервера указывается в конфигурационном файле ноды.
Сервер должен быть доступен каждой ноде сети.

.. _kick_inactive:

Исключение неактивных майнеров
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Если каким-либо майнером  N\ :sub:`ban` \ раз подряд было пропущено создание блока, этот майнер исключается из очереди на t\ :sub:`ban` \ последующих блоков (параметр ``ban-duration-blocks`` в конфигурационном файле).  
Исключение выполняется каждым узлом самостоятельно на основании вычисляемой очереди Q\ :sub:`H` \ и информации о блоке H и майнере M\ :sub:`H` \.
С помощью параметра P\ :sub:`ban` \ задается максимально допустимая доля исключенных майнеров в сети относительно всех активных майнеров в любой момент времени. Если при достижении N\ :sub:`ban` \ пропусков раунда известно, что максимальная доля исключенных майнеров P\ :sub:`ban` \ достигнута, то исключение очередного майнера не производится.

Мониторинг
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Мониторинг консенсуса PoA помогает выявлять факты создания и распространения невалидных блоков, а также пропуски очереди майнерами.
Дальнейшие действия по выявлению и устранению неисправностей, а также блокировке вредоносных узлов выполняются администраторами сети.

В целях мониторинга процесса формирования блоков для алгоритма PoA в InfluxDB размещаются данные:

* Активный список майнеров, отсортированный в порядке предоставления прав на майнинг.
* Плановая временная метка раунда.
* Фактическая временная метка раунда.
* Текущий майнер.


Изменение параметров консенсуса
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Изменение параметров консенсуса (время раунда и периода синхронизации) выполняется на основании данных конфигурационного файла ноды (см. врезку) на высоте "from-height".
Если одна из нод не укажет новые параметры, то произойдет форк.
Пример конфигурации :
::
    // specifying inside of the blockchain parameter
    consensus {
      type = poa
      sync-duration = 10s
      round-duration = 60s
      ban-duration-blocks = 100
      changes = [
        {
          from-height = 18345
          sync-duration = 5s
          round-duration = 60s
        },
        {
          from-height = 25000
          sync-duration = 10s
          round-duration = 30s
        }]
    }