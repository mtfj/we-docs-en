.. _install-nodes-docker:

Установка нескольких нод
==========================


1. Проверка предустановленного docker
--------------------------------------

Набрав в консоли вашей ОС команду ``docker version`` вы полчите информацию об установленном пакете docker, переходите к следующему шагу, если отображается результат вида:

 .. code:: js

  Client: Docker Engine - Community
  Version:           19.03.1
  API version:       1.40
  Go version:        go1.12.5
  Git commit:        74b1e89
  Built:             Thu Jul 25 21:21:05 2019
  OS/Arch:           linux/amd64
  Experimental:      false

  Server: Docker Engine - Community
  Engine:
  Version:          19.03.1
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.5
  Git commit:       74b1e89
  Built:            Thu Jul 25 21:19:41 2019
  OS/Arch:          linux/amd64
  Experimental:     false
  containerd:
  Version:          1.2.6
  GitCommit:        894b81a4b802e4eb2a91d1ce216b8817763c29fb
  runc:
  Version:          1.0.0-rc8
  GitCommit:        425e105d5a03fabd737a126ad93d62a9eeede87f
  docker-init:
  Version:          0.18.0
  GitCommit:        fec3683

В ином случае вам необходимо установить соответствующие docker и docker-compose -пакеты, соответствущие вашему типу ОС. Далее необходимо скачать сам набор файлов для docker-compose с публичного репозитория.

.. _docker-conteiner:

2. Работа с контейнерами docker
---------------------------------

В директории со скачанным .yml-файлом, откройте терминал. Введите команду ``docker-compose up -d``. Docker-compose выдаст индикацию хода запуска каждой ноды в контейнере. Представлен пример успешного завешения:

+------------------------------+
|  .. image:: img/pict_ok.png  |
|      :height: 70             |
+------------------------------+

В ином случае docker напишет сообщение об ошибках:

+------------------------------+
|  .. image:: img/pict_er.png  |
|        :height: 70           |
+------------------------------+  


3. Проверка и тестирование нод
-------------------------------

В терминале наберите команду ``docker ps -f name=node``. Тогда вы увидите все локально запущенные  ноды: 

+------------------------------+
|  .. image:: img/nodes.png    |
|        :height: 70           |
+------------------------------+  

В случае успеха, вы получите список из трех нод.

.. _api-testnode:

4. Проверка через api-ноды
---------------------------

Для тестирования p2p-соединения используйте api каждой из нод, достаточными считаются методы получения запроса баланса, публичного ключа и адреса. Следуя инструкциям раздела api-ноды, вы сможете протестировать работу каждой ноды.

.. _check-ports:

Создание сети из нескольких нод
---------------------------------

**Подготовка:**

Следует узнать IP адресы компьютеров, включемых в сеть. Освободить порт 6468 для обмена данными между нодами. Настройка network.conf с соответствующими параметрами конфигурации.

**Конфигурирование параметров сети:**

Необходимо сгенерироовать адреса и акуаунты на всех машинах для создания p2p соединения. Полученные данные внести в соответствующие поля конфигурационного файла ``network.conf``.
   
   .. code:: js

      Peers network addresses and ports
      known-peers = ["хххх.хххх.хххх.хххх:6864", "хххх.хххх.хххх.хххх:6864"]
     
Задайте минимальное количество машин в сети. WARN! Процесс майнинга и генерации блоков не начинается,пока минимальное количество членов сети не станет большим либо равным
значению `` quorum `` в конфигурационном фале ``network.conf``. Своя машина в расчет не берется: ``quorum=N-1``, где N - количество машин в сети.